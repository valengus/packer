---

# - name: Download virtio-win.iso
#   win_get_url:
#     url: https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/virtio-win-0.1.208-1/virtio-win.iso
#     force: no
#     dest: "{{ ansible_env.TEMP }}\\virtio-win.iso"

- name: Copy virtio-win.iso
  ansible.windows.win_copy:
    src: "tools/virtio-win-0.1.208.iso"
    dest: "{{ ansible_env.TEMP }}\\virtio-win.iso"

- name: Ensure an ISO is mounted
  win_disk_image:
    image_path: "{{ ansible_env.TEMP }}\\virtio-win.iso"
    state: present
  register: disk_image_out

- name: Install qemu-ga
  win_package:
    path: '{{ disk_image_out.mount_paths[0] }}guest-agent\qemu-ga-x86_64.msi'
    state: present
    arguments:
    - /qn 
    - /norestart

- name: Export Cert from qxldod
  win_shell: '$cert = (Get-AuthenticodeSignature "{{ disk_image_out.mount_paths[0] }}\qxldod\2k19\amd64\qxldod.cat").SignerCertificate; [System.IO.File]::WriteAllBytes("{{ ansible_env.TEMP }}\redhat_qxldod.cer", $cert.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Cert));'

- name: Export Cert from balloon
  win_shell: '$cert = (Get-AuthenticodeSignature "{{ disk_image_out.mount_paths[0] }}\Balloon\2k19\amd64\blnsvr.exe").SignerCertificate; [System.IO.File]::WriteAllBytes("{{ ansible_env.TEMP }}\redhat_balloon.cer", $cert.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Cert));'

- name: Install RH certificate (qxldod) to TrustedPublisher certificate store
  win_command: 'certutil.exe -f -addstore "TrustedPublisher" {{ ansible_env.TEMP }}\redhat_qxldod.cer'

- name: Install RH certificate (Balloon) to TrustedPublisher certificate store
  win_command: 'certutil.exe -f -addstore "TrustedPublisher" {{ ansible_env.TEMP }}\redhat_balloon.cer'

- name: install drivers
  win_shell: "pnputil.exe /add-driver {{ disk_image_out.mount_paths[0] }}{{ item }}\\w10\\amd64\\*.inf /install"
  with_items:
    - "qxldod"
    - "Balloon"
    - "viorng"
    - "vioserial"
    - "vioinput"
    - "vioscsi"
    - "pvpanic"

- win_disk_image:
    image_path: "{{ ansible_env.TEMP }}\\virtio-win.iso"
    state: absent

- name: Delete previously downloaded iso and the certificates {{ ansible_env.SystemDrive }}\{redhat_balloon.cer,redhat_qxldod.cer}
  win_file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ ansible_env.TEMP }}\\redhat_balloon.cer"
    - "{{ ansible_env.TEMP }}\\redhat_qxldod.cer"
    - "{{ ansible_env.TEMP }}\\virtio-win.iso"


- name: Check services
  win_service:
    name: vdservice
  register: vdservice_result

- name: Install vdagent
  block:

    # - name: Download vdagent
    #   win_get_url:
    #     url: "https://www.spice-space.org/download/windows/vdagent/vdagent-win-{{ vdagent_win_version }}/vdagent-win-{{ vdagent_win_version }}-x64.zip"
    #     dest: "{{ ansible_env.TEMP }}\\vdagent-win.zip"

    - name: Copy vdagent
      ansible.windows.win_copy:
        src: "tools/vdagent-win-0.10.0-x64.zip"
        dest: "{{ ansible_env.TEMP }}\\vdagent-win.zip"

    - name: Create {{ ansible_env['ProgramFiles(x86)'] }}\\SPICE Guest Tools directory
      win_file:
        path: "{{ ansible_env['ProgramFiles(x86)'] }}\\SPICE Guest Tools"
        state: directory

    - name: Extract vdagent archive
      win_unzip:
        src: "{{ ansible_env.TEMP }}\\vdagent-win.zip"
        dest: "{{ ansible_env.TEMP }}"
        delete_archive: yes

    - name: Move vdagent binaries to final destination ({{ ansible_env['ProgramFiles(x86)'] }}\\SPICE Guest Tools)
      win_copy:
        src: "{{ ansible_env.TEMP }}\\vdagent-win-{{ vdagent_win_version }}-x64\\"
        dest: "{{ ansible_env['ProgramFiles(x86)'] }}\\SPICE Guest Tools\\"
        remote_src: yes

    - name: Delete unpacked vdagent binaries
      win_file:
        path: "{{ ansible_env.TEMP }}\\vdagent-win-{{ vdagent_win_version }}-{{ ansible_env.PROCESSOR_ARCHITECTURE | lower }}"
        state: absent

    - name: Install vdagent
      win_command: "\"{{ ansible_env['ProgramFiles(x86)'] }}\\SPICE Guest Tools\\vdservice.exe\" install"
  when: vdservice_result.state is not defined or vdservice_result.name is not defined

# - name: reboot
#   win_reboot:
#     reboot_timeout: 6000